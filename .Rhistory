bloup$experience_horse = as.factor(bloup$experience_horse)
bloup$management_horse = as.factor(bloup$management_horse)
bloup$riding_ability = as.factor(bloup$riding_ability)
bloup$handling_skills = as.factor(bloup$handling_skills)
bloup$head_collar = as.factor(bloup$head_collar)
bloup$lead = as.factor(bloup$lead)
bloup$front_foot = as.factor(bloup$front_foot)
bloup$hind_foot = as.factor(bloup$hind_foot)
bloup$groom = as.factor(bloup$groom)
bloup$rug = as.factor(bloup$rug)
bloup$NR_error = as.factor(bloup$NR_error)
bloup$PP_error = as.factor(bloup$PP_error)
bloup$NP_error = as.factor(bloup$NP_error)
bloup$PR_error = as.factor(bloup$PR_error)
#bloup = bloup[,-1]
bloup = bloup[,c(3,5,8,11,12,15,24,34)]
View(bloup)
percentage_error = bloup$PR_error
res.mca = MCA(bloup, quanti.sup = c(8))
pdf(file="bloup.pdf")
plotellipses(res.mca)
eig.val <- get_eigenvalue(res.mca)
# head(eig.val)
fviz_screeplot (res.mca, addlabels = TRUE)
fviz_mca_biplot (res.mca, repel = TRUE,
ggtheme = theme_minimal())
fviz_mca_var (res.mca, repel = TRUE) + theme_minimal()
fviz_mca_var(res.mca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
# Contributions des variables a la dimension 1
fviz_contrib (res.mca, choice = "var", axes = 1, top = 15)
# Contributions des variables a la dimension 2
fviz_contrib (res.mca, choice = "var", axes = 2, top = 15)
#fviz_mca_var(res.mca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, ggtheme = theme_minimal())
fviz_contrib(res.mca, choice = "ind", axes = 1:2, top = 20)
dev.off()
res.desc <- dimdesc (res.mca, axes = c(1,2))
# Description de la dimension 1
res.desc[[1]]
# Description de la dimension 2
res.desc[[2]]
source('C:/Users/pinch/Desktop/blip.R')
source('C:/Users/pinch/Desktop/blip.R')
res.mca = MCA(bloup, quanti.sup = c(8))
plot.MCA(res.mca)
plot.MCA(res.mca, axes=c(2,3))
source('C:/Users/pinch/Desktop/blip.R')
source('C:/Users/pinch/Desktop/blip.R')
source('C:/Users/pinch/Desktop/blip.R')
plotellipses(res.mca)
res.desc
res.desc[[1]]
res.desc[[2]]
source('C:/Users/pinch/Desktop/blip.R')
require("FactoMineR")
require("factoextra")
bloup <- read.csv("D:/Downloads/Data analysis.csv")
#transformation en facteur
bloup$confidence_horse = as.factor(bloup$confidence_horse)
bloup$confidence_small = as.factor(bloup$confidence_small)
bloup$confidence_large = as.factor(bloup$confidence_large)
bloup$experience_horse = as.factor(bloup$experience_horse)
bloup$management_horse = as.factor(bloup$management_horse)
bloup$riding_ability = as.factor(bloup$riding_ability)
bloup$handling_skills = as.factor(bloup$handling_skills)
bloup$head_collar = as.factor(bloup$head_collar)
bloup$lead = as.factor(bloup$lead)
bloup$front_foot = as.factor(bloup$front_foot)
bloup$hind_foot = as.factor(bloup$hind_foot)
bloup$groom = as.factor(bloup$groom)
bloup$rug = as.factor(bloup$rug)
bloup$NR_error = as.factor(bloup$NR_error)
bloup$PP_error = as.factor(bloup$PP_error)
bloup$NP_error = as.factor(bloup$NP_error)
bloup$PR_error = as.factor(bloup$PR_error)
# Selection des variable voulues
bloup = bloup[,c(3,5,8,11,12,15,24,34)]
#percentage_error = bloup$PR_error
res.mca = MCA(bloup, quanti.sup = c(8))
# Realisation MCA et plot
plotellipses(res.mca)
eig.val <- get_eigenvalue(res.mca)
# head(eig.val)
fviz_screeplot (res.mca, addlabels = TRUE)
fviz_mca_biplot (res.mca, repel = TRUE,
ggtheme = theme_minimal())
fviz_mca_var (res.mca, repel = TRUE) + theme_minimal()
#fviz_mca_var(res.mca, col.var = "cos2",
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE)
# Contributions des variables a la dimension 1
fviz_contrib (res.mca, choice = "var", axes = 1, top = 15)
# Contributions des variables a la dimension 2
fviz_contrib (res.mca, choice = "var", axes = 2, top = 15)
#fviz_mca_var(res.mca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, ggtheme = theme_minimal())
fviz_contrib(res.mca, choice = "ind", axes = 1:2, top = 20)
res.desc <- dimdesc (res.mca, axes = c(1,2))
# Description de la dimension 1
res.desc[[1]]
# Description de la dimension 2
res.desc[[2]]
require("FactoMineR")
require("factoextra")
bloup <- read.csv("D:/Downloads/Data analysis.csv")
#transformation en facteur
bloup$confidence_horse = as.factor(bloup$confidence_horse)
bloup$confidence_small = as.factor(bloup$confidence_small)
bloup$confidence_large = as.factor(bloup$confidence_large)
bloup$experience_horse = as.factor(bloup$experience_horse)
bloup$management_horse = as.factor(bloup$management_horse)
bloup$riding_ability = as.factor(bloup$riding_ability)
bloup$handling_skills = as.factor(bloup$handling_skills)
bloup$head_collar = as.factor(bloup$head_collar)
bloup$lead = as.factor(bloup$lead)
bloup$front_foot = as.factor(bloup$front_foot)
bloup$hind_foot = as.factor(bloup$hind_foot)
bloup$groom = as.factor(bloup$groom)
bloup$rug = as.factor(bloup$rug)
bloup$NR_error = as.factor(bloup$NR_error)
bloup$PP_error = as.factor(bloup$PP_error)
bloup$NP_error = as.factor(bloup$NP_error)
bloup$PR_error = as.factor(bloup$PR_error)
# Selection des variable voulues
bloup = bloup[,c(3,5,8,11,12,15,24,34)]
#percentage_error = bloup$PR_error
res.mca = MCA(bloup, quanti.sup = c(8))
# Realisation MCA et plot
plotellipses(res.mca)
eig.val <- get_eigenvalue(res.mca)
# head(eig.val)
fviz_screeplot (res.mca, addlabels = TRUE)
fviz_mca_biplot (res.mca, repel = TRUE,
ggtheme = theme_minimal())
fviz_mca_var (res.mca, repel = TRUE) + theme_minimal()
#fviz_mca_var(res.mca, col.var = "cos2",
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE)
# Contributions des variables a la dimension 1
fviz_contrib (res.mca, choice = "var", axes = 1, top = 15)
# Contributions des variables a la dimension 2
fviz_contrib (res.mca, choice = "var", axes = 2, top = 15)
#fviz_mca_var(res.mca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, ggtheme = theme_minimal())
fviz_contrib(res.mca, choice = "ind", axes = 1:2, top = 20)
res.desc <- dimdesc (res.mca, axes = c(1,2))
# Description de la dimension 1
res.desc[[1]]
# Description de la dimension 2
res.desc[[2]]
require(MASS)
mjca
mjca()
require(ca)
library("nnet", lib.loc="C:/Program Files/Microsoft/R Client/R_SERVER/library")
install.packages("finalfit")
install.packages("finalfit")
require(finalfit)
# Load the WGCNA package
require(WGCNA);
install.packages("WGCNA")
setwd("C:/Users/pinch/Desktop")
source('C:/Users/pinch/Desktop/WGCNA.R')
# Load the WGCNA package
require(WGCNA);
install.packages("GO.db")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
# Load the WGCNA package
require(WGCNA);
"GO.db" %in% rownames(installed.packages())
"GO.Db" %in% rownames(installed.packages())
source('C:/Users/pinch/Desktop/WGCNA.R')
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
return()
} else {
return (package_name)
}
}
not_installed("GO.db")
("GO.db")
not_installed("Bloup")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
return()
} else {
return (package_name)
}
}
not_installed("Bloup")
sapply(needed_packages, not_installed)
lapply(needed_packages, not_installed)
apply(needed_packages, not_installed)
sapply(needed_packages, not_installed)
needed_packages = c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival", "Bloup")
sapply(needed_packages, not_installed)
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
return(NA)
} else {
return (package_name)
}
}
sapply(needed_packages, not_installed, na.rm = TRUE)
sapply(needed_packages, not_installed)
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
return()
} else {
return (package_name)
}
}
sapply(needed_packages, not_installed)
sapply(needed_packages, not_installed)
is.null(to_install)
as.null(to_install)
to_install = sapply(needed_packages, not_installed)
sapply(to_install, is.null)
to_install[sapply(to_install, is.null)]
to_install
to_install[sapply(to_install, is.null)] <- NULL
to_install
library("survival", lib.loc="C:/Program Files/R/R-3.5.3/library")
detach("package:survival", unload=TRUE)
list=ls
list=ls()
ls()
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
to_install = sapply(needed_packages, not_installed)
needed_packages = c("matrixStats", "Hmisc", "splines", "foreach", "doParallel",
"fastcluster", "dynamicTreeCut", "survival")
to_install = sapply(needed_packages, not_installed)
View(to_install)
to_install
needed_packages = c("matrixStats", "Hmisc", "splines", "foreach", "doParallel",
"fastcluster", "dynamicTreeCut", "survival","bloup")
to_install = sapply(needed_packages, not_installed)
to_install
uninstall.packages(Hmisc)
remove.packages(Hmisc)
remove.packages("Hmisc")
installed.packages("Hmisc")
remove.packages("Hmisc", library(package))
remove.packages("Hmisc", library(package))
remove.packages("Hmisc", library(packages))
remove.packages("Hmisc", library(Package))
remove.packages("Hmisc", library("Package"))
remove.packages("minqa", lib="~/R/win-library/3.5")
needed_packages = c("matrixStats", "Hmisc", "splines", "foreach", "doParallel",
"fastcluster", "dynamicTreeCut", "survival")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name %in% c("GO.db", "preprocessCore", "impute")) {
biocLite(package_name)
} else {
install.packages(package_name)
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
sapply(to_install, packages_intallation)
install.packages(package_name)
sapply(to_install, packages_intallation)
packages_intallation <- function(package_name) {
if (package_name %in% c("GO.db", "preprocessCore", "impute")) {
biocLite(package_name)
} else {
print(package_name)
install.packages(package_name)
}
}
sapply(to_install, packages_intallation)
packages_intallation <- function(package_name) {
if (package_name %in% c("GO.db", "preprocessCore", "impute")) {
biocLite(package_name)
} else {
print(package_name)
install.packages(package_name, quiet = TRUE, dependencies = TRUE)
}
}
sapply(to_install, packages_intallation)
remove.packages("Hmisc", lib="~/R/win-library/3.5")
packages_intallation <- function(package_name) {
if (package_name %in% c("GO.db", "preprocessCore", "impute")) {
biocLite(package_name)
} else {
print(package_name)
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
sapply(to_install, packages_intallation)
invisible(sapply(to_install, packages_intallation))
needed_packages = c("matrixStats", "Hmisc", "splines", "foreach", "doParallel",
"fastcluster", "dynamicTreeCut", "survival")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name %in% c("GO.db", "preprocessCore", "impute")) {
biocLite(package_name)
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
needed_packages = c("matrixStats", "Hmisc", "splines", "foreach", "doParallel",
"fastcluster", "dynamicTreeCut", "survival")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name %in% c("GO.db", "preprocessCore", "impute")) {
source("https://bioconductor.org/biocLite.R")
biocLite(package_name)
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
needed_packages = c("BiocManager", "WGCNA")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name == "WGCNA") {
BiocManager::install("WGCNA")
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
remove.packages("WGCNA", lib="~/R/win-library/3.5")
library("BiocManager", lib.loc="~/R/win-library/3.5")
remove.packages("BiocManager", lib="~/R/win-library/3.5")
needed_packages = c("BiocManager", "WGCNA")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name == "WGCNA") {
BiocManager::install("WGCNA")
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
needed_packages = c("BiocManager", "WGCNA")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name == "WGCNA") {
BiocManager::install("WGCNA")
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
needed_packages = c("BiocManager", "WGCNA")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name == "WGCNA") {
BiocManager::install("WGCNA")
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
needed_packages = c("BiocManager", "WGCNA")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name == "WGCNA") {
BiocManager::install(ask = FALSE)
BiocManager::install("WGCNA",ask = FALSE)
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
rownames(installed.packages()
)
WGCNA %in%rownames(installed.packages())
WGCNA %in% rownames(installed.packages())
"WGCNA" %in% rownames(installed.packages())
match("WGCNA",rownames(installed.packages()))
remove.packages("WGCNA", lib="~/R/win-library/3.5")
remove.packages("BiocManager", lib="~/R/win-library/3.5")
needed_packages = c("BiocManager", "WGCNA")
not_installed <- function(package_name) {
answer_boolean = package_name %in% rownames(installed.packages())
if (answer_boolean) {
} else {
return(package_name)
}
}
packages_intallation <- function(package_name) {
if (package_name == "WGCNA") {
BiocManager::install(ask = FALSE)
BiocManager::install("WGCNA",ask = FALSE)
} else {
install.packages(package_name, quiet = TRUE, dependencies = "Depends")
}
}
to_install = sapply(needed_packages, not_installed)
to_install[sapply(to_install, is.null)] <- NULL
invisible(sapply(to_install, packages_intallation))
setwd("C:/Users/pinch/Desktop/WGCNA")
getwd()
### Installation
setwd(getwd())
source("./src/WGCNA_functions.R")
packages_verification(c("BiocManager", "WGCNA"))
View(packages_verification)
#===============================================================================
#
#  Code chunk preparation
#
#===============================================================================
### Working directory
# Set the current working directory as work directory
setwd(getwd())
### Installation packages
source("./src/WGCNA_functions.R")
packages_verification(c("BiocManager", "WGCNA"))
# Load the WGCNA package
require(WGCNA);
#===============================================================================
#
#  Code chunk data input
#
#===============================================================================
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
#Read in the female liver data set
femData = read.csv("Data/FemaleLiver-Data/LiverFemale3600.csv");
# Take a quick look at what is in the data set:
dim(femData);
names(femData);
source('C:/Users/pinch/Desktop/WGCNA/WGCNA.R')
source('C:/Users/pinch/Desktop/WGCNA/WGCNA.R')
source('C:/Users/pinch/Desktop/WGCNA/src/Network_constr_automatic.R')
source('C:/Users/pinch/Desktop/WGCNA/src/Network_constr_automatic.R')
source('C:/Users/pinch/Desktop/WGCNA/src/Network_visualization_using_WGCNA.R')
source('C:/Users/pinch/Desktop/WGCNA/src/Export_networks.R')
source('C:/Users/pinch/Desktop/WGCNA/src/Export_networks.R')
source('C:/Users/pinch/Desktop/WGCNA/src/Export_networks.R')
